name: Integrate backend

on:
  pull_request:
    paths:
      - 'api/**'
      - '.github/workflows/integrate-backend.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.7'
        cache: 'pip'

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        pip install poetry
        cd ./api
        poetry install --with test

    - name: Run pytest
      env:
        TEST_USER_TOKEN: ${{ secrets.TEST_USER_TOKEN }}
        SECRET_JWT_KEY: ${{ secrets.SECRET_JWT_KEY }}
      run: |
        cd api
        poetry run pytest -v --cov-report xml:coverage.xml --cov=src

    - name: Upload coverage to Codacy
      run:  bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml

    - name: Start API and run health check
      run: |
        cd api
        echo "Starting uvicorn server..."
        PYTHONPATH=./src poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        
        echo "Waiting for API to become available..."
        timeout 30s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8000/health)" != "200" ]]; do sleep 1; done' || {
          echo "API failed to start within timeout"
          exit 1
        }
        
        echo "API is up and healthy!"
        pkill -f uvicorn

    - name: Display Uvicorn logs on failure
      if: failure()
      run: |
        echo "Showing Uvicorn logs after failure..."
        cd api
        cat uvicorn.log
